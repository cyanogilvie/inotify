# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> shiftwidth=4 ts=4

if {[lsearch [namespace children] ::tcltest] == -1} {
	package require tcltest 2.2.5
	namespace import ::tcltest::*
}


set tmpdir [makeDirectory tmp]

package require inotify

test basic-1.1 {Add and remove a watch} -setup { #<<<
	set queue	[inotify::create_queue]
} -body {
	inotify::add_watch $queue $tmpdir {IN_ALL_EVENTS}
	inotify::rm_watch $queue $tmpdir
} -cleanup {
	if {[info exists queue]} {close $queue; unset queue}
} -result {0}
#>>>
test basic-1.2 {Detect a file creation in a dir} -setup { #<<<
	set queue	[inotify::create_queue]
	fconfigure $queue -blocking 0 -buffering none -translation binary -encoding binary
	#set wd	[inotify::add_watch $queue [file join $tmpdir foo] {IN_ALL_EVENTS}]
	set wd	[inotify::add_watch $queue $tmpdir {IN_ALL_EVENTS}]
	puts stderr "wd is: ($wd)"
	proc readable {fd} {
		puts stderr "Got readable on ($fd)"
		if {[eof $fd]} {
			puts "Queue collapsed"
			set ::done 1
			return
		}
		set dat	[read $fd]
		puts "Got [string length $dat] bytes on queue"
		set ::done 1
	}
} -body {
	fileevent $queue readable [list readable $queue]
	set fp	[open [file join $tmpdir foo] a]
	puts $fp "dummy"
	close $fp

	file delete [file join $tmpdir foo]

	puts stderr "waiting on ($tmpdir)"
	after 3000 {set ::done -1}
	#inotify::slurp_queue $queue false
	vwait ::done
	set ::done
} -cleanup {
	#inotify::rm_watch $queue [file join $tmpdir foo]
	inotify::rm_watch $queue $tmpdir
	if {[info exists queue]} {close $queue; unset queue}
	rename readable {}
} -result {1}
#>>>
test basic-1.3 {Management of watched paths list} -setup { #<<<
	set queue	[inotify::create_queue]
} -body {
	set before	[inotify::watched_paths]
	inotify::add_watch $queue $tmpdir {IN_ALL_EVENTS}
	set during	[inotify::watched_paths]
	inotify::rm_watch $queue $tmpdir
	set after	[inotify::watched_paths]
	list $before $during $after
} -cleanup {
	if {[info exists queue]} {close $queue; unset queue}
} -result [list {} $tmpdir {}]
#>>>

::tcltest::cleanupTests
return
