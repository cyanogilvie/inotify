.TH inotify n 0.1.0 "Tcl-extensions"
.HS inotify tcl
.BS
.SH NAME
inotify \- Listen for events on files and directories
.SH SYNOPSIS
\fBinotify::queue create\fI objectName \fR\fIcallback\fR
.br
\fIobjectName\fB add_watch \fIpath\fR ?\fImask\fR?
.br
\fIobjectName\fB rm_watch \fIpath\fR
.BE

'\" # CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\" # CE - end code excerpt
.de CE
.fi
.RE
..
.SH DESCRIPTION
.PP
The Linux kernel (since 2.6.13) provides a mechanism to listen for events
that happen on files and directories, without needing to poll for updates.
This Tcl extension implements a wrapper to allow Tcl programs to access this
facility.

.SH "WATCHING FILES VS DIRECTORIES"
.PP
When a watch is placed on an ordinary file, the events it generates relate
directly to the watched file itself.  If, however, the path being watched is
a directory, then in addition to receiving events about the directory itself,
it also generates events for its direct children (but not
recursively for the whole subtree under the directory).  In this case the
event generated contains a \fBname\fR field which identifies the relative
name of the child under the watched directory that generated the event.

.SH MASKS
.PP
Masks are a mechanism that the inotify syscalls provide to allow application
programmers to express which event types they are interested in receiving.  In
the Tcl wrapper, masks are represented as lists, with an element for each flag
that can be set in the mask.  The following flags are valid to specify to an
\fBadd_watch\fR call, and may be set on an event returned by the system: 
.in +0.25i
.TS
lB lB
lB lB
lB lB
lB l.
Table 1:

     Flag	Description
(sc) IN_ACCESS	File was accessed (read).
(sc) IN_ATTRIB	Metadata changed (permissions, timestamps,
	extended attributes, etc).
(sc) IN_CLOSE_WRITE	File opened for writing was closed.
(sc) IN_CLOSE_NOWRITE	File not opened for writing was closed.
( c) IN_CREATE	File/directory created in watched directory.
( c) IN_DELETE	File/directory deleted from watched directory.
(s ) IN_DELETE_SELF	Watched file/directory was itself deleted.
(sc) IN_MODIFY	File was modified.
(s ) IN_MOVE_SELF	Watched file/directory was itself moved.
( c) IN_MOVED_FROM	File moved out of watched directory.
( c) IN_MOVED_TO	File moved into watched diretory.
(sc) IN_OPEN	File was opened.
.TE
.in -0.25i
.PP
Some of the flags apply only to the path being watched, while others only to
children of that path (presuming the path is a directory), and others to both.
In the table above, those applicable to the watched path itself are flagged with
an \fBs\fR and those applicable to children of the watched path with a \fBc\fR.
.PP
There are three convenience flags defined: \fBIN_ALL_EVENTS\fR, which selects
all the above flags, \fBIN_MOVE\fR which is equivalent to \fB{IN_MOVED_FROM
IN_MOVED_TO}\fR, and \fBIN_CLOSE\fR, which is equivalent to
\fB{IN_CLOSE_WRITE IN_CLOSE_NOWRITE}\fR.
.PP
In addition to the flags in the above table, the following are also valid in
the \fBmask\fR parameter when calling \fBadd_watch\fR:
.in +0.25i
.TS
lB lB
lB lB
lB lB
lB l.
Table 2:

Flag	Description
IN_DONT_FOLLOW	If the watched path is a symbolic link, watch the
	link itself rather than path it points to.
IN_MASK_ADD	If this call to \fBadd_watch\fR is for a path that is
	already watched, add these flags to those already
	set, otherwise replace what was set before.
IN_ONESHOT	Watch this path for one event, and then remove it
	from the watch list.  This is not supported
	on kernels older than 2.6.16.
IN_ONLYDIR	Only watch this path if it is a directory.
.TE
.in -0.25i
.PP
In the \fBmask\fR field returned when an event occurs, the following flags
may be set in addition to those in the first table above:
.in +0.25i
.TS
lB lB
lB lB
lB lB
lB l.
Table 3:

Flag	Description
IN_IGNORED	The watch was removed, either explicitly with
	rm_watch, or because the watched path was deleted,
	or the filesystem was unmounted.
IN_ISDIR	The subject of this event is a directory.
IN_Q_OVERFLOW	Event queue overflowed (too many events occurred
	before they could be processed).  See
	/proc/sys/fs/inotify/max_queued_events.
IN_UNMOUNT	The filesystem containing the watched path
	was unmounted.
.TE
.in -0.25i

.SH QUEUES
.PP
Queues are first in, first out buffers of events.  One queue can (and is
intended to have) many watches that feed it.  Ordering of events is
guaranteed within a queue.
.PP
If two or more identical events occur in sequence in a queue, they are
collapsed into one.
.PP
When a queue is deleted, all watches registered for it are removed.

.SH COMMANDS
.PP
.TP
\fBinotify::queue create \fIobjectName\fR \fIcallback\fR
.TP
\fBinotify::queue new \fIcallback\fR
Create a queue object.  Returns the name of the queue object created.
The following options are valid when creating the queue:
.TP
\fB\fIcallback\fR
Register a callback that will be invoked with each event that arrives on the
queue.  The specified \fIcallback\fR will be invoked after appending the
details of the event in a dictionary:
.br
\fIcallback event-details\fR
.br
The dictionary \fIevent-details\fR contains the following keys:
.in +0.25i
.TS
lB lB
lB l.
Key	Description
path	The path of the file / directory that the
	watch was registered on.
mask	A list of the flags that identify what the event is,
	from tables 1 and 3 above.
cookie	In the event that two events are related, such
	as a rename, they are identified as such
	by sharing a unique cookie value.
name	When the watch is on a directory and an event
	occurs on one of the children of the directory, this
	field contains the relative name of the child.
.TE
.in -0.25i
.TP
\fIobjectName \fBadd_watch \fIpath \fR?\fImask\fR?
Add \fIpath\fR to the list of paths watched in this queue, or update the flags
of an existing watch if this path was already watched.  If \fImask\fR is
not specified, it defaults to \fBIN_ALL_EVENTS\fR, otherwise it must be
a list containing flags from tables 1 and 2.
.TP
\fIobjectName \fBrm_watch \fIpath\fR
Remove a path from the list of watched paths.  If \fIpath\fR is not watched
then an error is raised, with -errorcode set to {no_watches \fIpath\fR}.
.TP
\fBdelete object \fIobjectName\fR
Delete a queue.  All watches feeding this queue are removed.

.SH EXAMPLE
.PP
Create a watch on the /tmp directory and print out any events as they arrive:
.PP
.CS
% \fBpackage require inotify\fR
2.0.2
% \fBproc something_happened {event_details} {
    puts "Event happened:"
    array set ev $event_details
    parray ev
}\fR
% \fBinotify::queue create queue something_happened\fR
queue
% \fBqueue add_watch /tmp\fR
/tmp
% \fBvwait ::forever\fR

 ... another process does a \fBtouch /tmp/foo\fR ...

Event happened:
ev(cookie) = 0
ev(mask)   = IN_CREATE
ev(name)   = foo
ev(path)   = /tmp
Event happened:
ev(cookie) = 0
ev(mask)   = IN_OPEN
ev(name)   = foo
ev(path)   = /tmp
Event happened:
ev(cookie) = 0
ev(mask)   = IN_ATTRIB
ev(name)   = foo
ev(path)   = /tmp
Event happened:
ev(cookie) = 0
ev(mask)   = IN_CLOSE_WRITE
ev(name)   = foo
ev(path)   = /tmp
.CE

.SH LIMITS
.PP
The kernel provides three knobs to tune the memory limits of the
inotify system:
.TP
\fB/proc/sys/fs/inotify/max_queued_events\fR
The number of events that will be queued up by the kernel for a given queue
before the \fBIN_Q_OVERFLOW\fR event is generated and events are dropped.
.TP
\fB/proc/sys/fs/inotify/max_user_instances\fR
This limits the number of queues that can be created by a user.
.TP
\fB/proc/sys/fs/inotify/max_user_watches\fR
This is the limit of the number of watches that can be associated with a single
queue.

.SH "SEE ALSO"
inotify(7), Linux kernel inotify documentation

.SH KEYWORDS
file, notification, event, inotify, tcl
